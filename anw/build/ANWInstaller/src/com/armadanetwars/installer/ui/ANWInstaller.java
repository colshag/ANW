/*
 * ANWInstaller.java
 *
 * Created on May 25, 2007, 4:48 PM
 */

package com.armadanetwars.installer.ui;

import java.awt.Dimension;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.LinkedList;
import java.util.List;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;


import com.armadanetwars.LaunchPreferences;
import com.armadanetwars.LaunchProfile;
import com.armadanetwars.download.Downloader;
import com.armadanetwars.installer.Progress;
import com.armadanetwars.launcher.Launcher;

/**
 *
 * @author  kundertk
 */
public class ANWInstaller extends javax.swing.JFrame {
    
    private Downloader downloader;
    private Progress progress;
    private static String WEBROOT = "http://www.armadanetwars.com/downloads";
	private File[] prefFiles = new File[8];
    private LaunchPreferences preferences = new LaunchPreferences(prefFiles.length);
    private String homeDirectory = System.getProperty("user.home");
    private String separator = System.getProperty("file.separator");
	private String installDirPref = homeDirectory + "/.ANWInstallDirectory.pref";
	private JFileChooser fileChooser = new JFileChooser();
	
	private String defaultInstallPath = this.homeDirectory + separator + "ANW";
	private String outputOfLastLaunch = null;
	
    /** Creates new form ANWInstaller */
    public ANWInstaller() {
    	initComponents();
        initCustomComponents();
        loadPreferencesFromFile();
    }
    
    private void loadPreferencesFromFile() {
    	DefaultComboBoxModel model = (DefaultComboBoxModel) this.comboProfile.getModel();
    	model.removeAllElements();
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		try {
			fileChooser.setSelectedFile(new File(defaultInstallPath));
		} catch( Exception e ) {
			e.printStackTrace();
		}
    	try {
			BufferedReader installLocation = new BufferedReader(new FileReader(installDirPref));
			installPath.setText(installLocation.readLine());
			if( installPath.getText().trim().equals("") ) {
				installPath.setText(defaultInstallPath);
			}
			try {
				fileChooser.setSelectedFile(new File(installPath.getText()));
			} catch( Exception e ) {
				e.printStackTrace();
			}
    	} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
    	for( int x = 0; x < prefFiles.length; x++ ) {
    		prefFiles[x] = new File(homeDirectory + separator + ".ANWProfile " + (x + 1) + ".pref"); 
			model.addElement( "Profile " + (x + 1) );
    		if( prefFiles[x].exists() ) {
    			// load
    			try {
					BufferedReader in = new BufferedReader(new FileReader(prefFiles[x]));
					
					String host = in.readLine();
					String game = in.readLine();
					int empire = Integer.parseInt(in.readLine());
					String password = in.readLine();
					String description = in.readLine();
					Dimension dim = null;
					boolean fullscreen = false;
                    boolean sound = false;
                    boolean psyco = false;
					int width = Integer.parseInt(in.readLine());
					int height = Integer.parseInt(in.readLine());
					dim = new Dimension(width, height);
					fullscreen = Boolean.parseBoolean(in.readLine());

                    sound = Boolean.parseBoolean(in.readLine());
                    psyco = Boolean.parseBoolean(in.readLine());
                    System.out.println("Sound, psyco" + sound + " " + psyco);
					in.close();
					
					LaunchProfile prof = new LaunchProfile(host, game, empire, password, description, dim, fullscreen, sound, psyco);
					this.preferences.setProfile(x, prof);
				} catch (Exception e) {
	    			System.out.println("Couldn't Load config file. generating default");
	    			LaunchProfile prof = new LaunchProfile();
	    			this.preferences.setProfile(x, prof);
					e.printStackTrace();
				}
    		} else {
    			// create reasonable defaults.
    			LaunchProfile prof = new LaunchProfile();
    			this.preferences.setProfile(x, prof);
    		}
    	}  
    	this.comboProfile.setSelectedIndex(0);
	}

	/** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        launchPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        comboProfile = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        comboResolution = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        textFieldDescription = new javax.swing.JTextField();
        checkBoxFullScreen = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        textFieldGame = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        checkBoxSound = new javax.swing.JCheckBox();
        checkBoxPsyco = new javax.swing.JCheckBox();
        comboServer = new javax.swing.JComboBox();
        comboEmpire = new javax.swing.JComboBox();
        userPassword = new javax.swing.JPasswordField();
        installPanel = new javax.swing.JPanel();
        installPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        browseButton = new javax.swing.JButton();
        installUpdateButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        bytesDescription = new javax.swing.JLabel();
        bytesLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        buttonUninstall = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        buttonLaunch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Armada Net Wars");
        setBackground(new java.awt.Color(83, 97, 134));
        setForeground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        launchPanel.setBackground(new java.awt.Color(83, 97, 134));
        launchPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Game Settings"));

        jPanel1.setBackground(new java.awt.Color(83, 97, 134));

        comboProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboProfileActionPerformed(evt);
            }
        });

        jLabel2.setText("Resolution");

        comboResolution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024x768", "1152x864", "1280x768", "1280x800", "1280x960", "1280x1024", "1360x768", "1366x768", "1440x900", "1600x900", "1600x1200", "1680x1050", "1920x1080", "1920x1200", "2048x1152", "2048x1536", "3200x2048", " ", " " }));

        jLabel9.setText("Description");

        textFieldDescription.setText("My Description");

        checkBoxFullScreen.setText("Full Screen");
        checkBoxFullScreen.setToolTipText("");
        checkBoxFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxFullScreenActionPerformed(evt);
            }
        });

        jLabel5.setText("Game");

        textFieldGame.setText("ANW1");

        jLabel6.setText("EmpireID");

        jLabel7.setText("Password");

        jLabel8.setText("Server");

        checkBoxSound.setText("Sound");
        checkBoxSound.setToolTipText("");
        checkBoxSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSoundActionPerformed(evt);
            }
        });

        checkBoxPsyco.setText("psyco");
        checkBoxPsyco.setToolTipText("");
        checkBoxPsyco.setEnabled(false);
        checkBoxPsyco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxPsycoActionPerformed(evt);
            }
        });

        comboServer.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://www.armadanetwars.com:8000", "http://home.armadanetwars.com:8000", "http://192.168.0.2:8000", "http://localhost:8000", "http://www.armadanetwars.com:443", "http://home.armadanetwars.com:443", "http://192.168.0.2:443", "http://localhost:443", " " }));

        comboEmpire.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1- Yellow Empire", "2 - Brown Empire", "3 - Green Empire", "4 - Blue Empire", "5 - Pink Empire", "6 - Red Empire", "7 - Cyan Empire", "8 - Fire Empire", " " }));

        userPassword.setText("none");
        userPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(comboProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(comboResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxFullScreen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxSound)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkBoxPsyco))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textFieldGame, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                            .addComponent(textFieldDescription, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                            .addComponent(comboServer, 0, 633, Short.MAX_VALUE)
                            .addComponent(comboEmpire, 0, 633, Short.MAX_VALUE)
                            .addComponent(userPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboProfile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(comboResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkBoxFullScreen)
                    .addComponent(checkBoxSound)
                    .addComponent(checkBoxPsyco))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(textFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFieldGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(comboEmpire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(userPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(comboServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout launchPanelLayout = new javax.swing.GroupLayout(launchPanel);
        launchPanel.setLayout(launchPanelLayout);
        launchPanelLayout.setHorizontalGroup(
            launchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        launchPanelLayout.setVerticalGroup(
            launchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        installPanel.setBackground(new java.awt.Color(83, 97, 134));
        installPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Install/Update"));

        installPath.setEditable(false);
        installPath.setText("/tmp");
        installPath.setEnabled(false);

        jLabel1.setText("Install Path");

        browseButton.setText("Browse...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        installUpdateButton.setText("Install/Update");
        installUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                installUpdateButtonActionPerformed(evt);
            }
        });

        progressBar.setString("Idle...");
        progressBar.setStringPainted(true);

        bytesDescription.setText("Downloaded:");

        bytesLabel.setText("0");

        cancelButton.setText("Cancel");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Status:");

        statusLabel.setText("Idle");

        buttonUninstall.setText("Uninstall");
        buttonUninstall.setToolTipText("This will remove the installed data, as well as Profiles created.");
        buttonUninstall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUninstallActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout installPanelLayout = new javax.swing.GroupLayout(installPanel);
        installPanel.setLayout(installPanelLayout);
        installPanelLayout.setHorizontalGroup(
            installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(installPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, installPanelLayout.createSequentialGroup()
                        .addComponent(buttonUninstall)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 487, Short.MAX_VALUE)
                        .addComponent(installUpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(installPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(installPath, javax.swing.GroupLayout.DEFAULT_SIZE, 584, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addGap(6, 6, 6))
                    .addGroup(installPanelLayout.createSequentialGroup()
                        .addComponent(bytesDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bytesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
                    .addGroup(installPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 709, Short.MAX_VALUE)))
                .addContainerGap())
        );
        installPanelLayout.setVerticalGroup(
            installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(installPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(installPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addGap(11, 11, 11)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(statusLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bytesDescription)
                    .addComponent(bytesLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(installPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(installUpdateButton)
                    .addComponent(buttonUninstall))
                .addContainerGap())
        );

        jLabel4.setBackground(new java.awt.Color(83, 97, 134));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anwtitle.gif"))); // NOI18N

        buttonLaunch.setBackground(new java.awt.Color(83, 97, 134));
        buttonLaunch.setText("Launch Armada Net Wars");
        buttonLaunch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonLaunchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 670, Short.MAX_VALUE)
                .addComponent(installPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(launchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonLaunch, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(installPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(launchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonLaunch, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
    	if( this.fileChooser.showOpenDialog(this) == JOptionPane.OK_OPTION ) {
    		this.installPath.setText(this.fileChooser.getSelectedFile().getAbsolutePath());
    	}
    }//GEN-LAST:event_browseButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.cancelButton.setEnabled(false);
        this.downloader.cancel();
        this.installUpdateButton.setEnabled(true);
        this.buttonLaunch.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    
    private void initCustomComponents() {
    	this.installPath.setText(defaultInstallPath);
                
    }
    
    private void installUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_installUpdateButtonActionPerformed
        this.installUpdateButton.setEnabled(false);
        this.cancelButton.setEnabled(true);
        this.browseButton.setEnabled(false);
        this.buttonLaunch.setEnabled(false);
        this.buttonUninstall.setEnabled(false);
        
        this.progress = new Progress();
        this.progress.setProgressBar(progressBar);
        this.progress.setBytesLabel(bytesLabel);
        this.progress.setStatusLabel(statusLabel);
        this.downloader = new Downloader(this.progress, WEBROOT, this.installPath.getText());

        try {
			FileWriter writer = new FileWriter(new File(installDirPref));
			writer.write(installPath.getText() + "\n");
			writer.flush();
			writer.close();
        } catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        
        new Thread(new Runnable() {
			@Override
			public void run() {
				downloader.update();
				SwingUtilities.invokeLater(new Runnable() {
					@Override
					public void run() {
						installUpdateButton.setEnabled(true);
						cancelButton.setEnabled(false);
				        browseButton.setEnabled(true);
				        buttonLaunch.setEnabled(true);
				        buttonUninstall.setEnabled(true);
					}
				});
			}
        }).start();
        
    }//GEN-LAST:event_installUpdateButtonActionPerformed

    private void comboProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboProfileActionPerformed
    	String prof = (String) comboProfile.getSelectedItem();
    	int index = comboProfile.getSelectedIndex();
    	if( index == -1 ) {
    		return;
    	}
    	LaunchProfile profile = this.preferences.getProfile(index);
    	if( profile == null ) {
    		this.preferences.setProfile(index, new LaunchProfile());
    	}
    	textFieldGame.setText(profile.getGame());
        comboServer.setSelectedItem(profile.getUrl());
        userPassword.setText(profile.getPassword());
        comboEmpire.setSelectedIndex(profile.getEmpire()-1);
    	textFieldDescription.setText(profile.getDescription());
    	checkBoxFullScreen.setSelected(profile.isFullscreen());
        checkBoxSound.setSelected(profile.isSound());
        checkBoxPsyco.setSelected(profile.isPsyco());
        String resolution = Integer.toString(profile.getResolution().width) + "x" + Integer.toString(profile.getResolution().height);
        comboResolution.setSelectedItem(resolution);
    }//GEN-LAST:event_comboProfileActionPerformed

    private void writeProfile(LaunchProfile prof) {
    	BufferedWriter writer;
		try {
			writer = new BufferedWriter(new FileWriter(this.prefFiles[this.comboProfile.getSelectedIndex()]));
                        writer.write(prof.getUrl() + "\n");
                        writer.write(prof.getGame() + "\n");
                        writer.write("" + prof.getEmpire() + "\n");
                        writer.write(prof.getPassword() + "\n");
                        writer.write(prof.getDescription() + "\n");
                        writer.write(Integer.toString(prof.getResolution().width) + "\n");
                        writer.write(Integer.toString(prof.getResolution().height) + "\n");
                        writer.write(Boolean.toString(prof.isFullscreen()) + "\n");
                        writer.write(Boolean.toString(prof.isSound()) + "\n");
                        writer.write(Boolean.toString(prof.isPsyco()) + "\n");
                        writer.flush();
                        writer.close();
	    	
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
    
    private void buttonLaunchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonLaunchActionPerformed
    	this.saveProfile();
        installUpdateButton.setEnabled(false);
	cancelButton.setEnabled(false);
        browseButton.setEnabled(true);
        buttonLaunch.setEnabled(true);
        buttonUninstall.setEnabled(true);
    	
    	int pref = this.comboProfile.getSelectedIndex();
    	LaunchProfile currentProfile = this.preferences.getProfile(pref);
    	File currentPref = this.prefFiles[pref];
    	if( currentPref.exists() == false ) {
    		JOptionPane.showMessageDialog(this, "Currently selected profile not yet saved. Set profile options, click Save and then try again.");
    		return;
    	}
    	List<String> args = new LinkedList<String>();
    	System.out.println("os.name: " + System.getProperty("os.name"));
    	if( System.getProperty("os.name").startsWith("Windows")) {
            args.add("cmd.exe");
            args.add("/C");
            args.add("run.bat");
    	} else if( System.getProperty("os.name").startsWith("Mac")) {
            args.add("sh");
            args.add("./runmac.sh");
        } else {
            args.add("sh");
            args.add("./run.sh");
    	}
    	final Launcher l = new Launcher(args, null, installPath.getText() + separator + "anw" + separator + "Client");
    	final Frame parent = this;
    	try {
    		currentProfile.writeLaunchInfo(installPath.getText());
    		//copy(currentPref, new File(installPath.getText() + separator + "anw" + separator + "Client" + separator + "connect.ini"));

    		buttonLaunch.setEnabled(false);
			installUpdateButton.setEnabled(false);
	        browseButton.setEnabled(false);
	        buttonUninstall.setEnabled(false);

	        SwingWorker<Void, Void> sw = new SwingWorker<Void, Void>() {
				@Override
				protected Void doInBackground() throws Exception {
					System.out.println("In swing worker");
					l.launch(parent);
					while( l.isLaunchComplete() == false ) {
						Thread.sleep(1000);
					}
					SwingUtilities.invokeLater(new Runnable() {
						@Override
						public void run() {
//							if( l.getReturnCode() != 0 ) {
//								JOptionPane.showMessageDialog(parent, "Armada Net Wars returned a failure code. Maybe try Updating?", "Error launching ANW", JOptionPane.ERROR_MESSAGE);
//							}
							buttonLaunch.setEnabled(true);
							installUpdateButton.setEnabled(true);
							browseButton.setEnabled(true);
							buttonUninstall.setEnabled(true);
						}
					});
					

		    		return null;
				}
			};
			sw.execute();
			System.out.println("Launch finished");
		} catch (IOException e) {
			JOptionPane.showMessageDialog(this, "Could not launch Armada Net Wars. Maybe try Updating?", "Error launching ANW", JOptionPane.ERROR_MESSAGE);
			e.printStackTrace();
		}
    }//GEN-LAST:event_buttonLaunchActionPerformed

    private void buttonUninstallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUninstallActionPerformed
    	String dirRemove = installPath.getText() + separator + "anw";
        if(JOptionPane.showConfirmDialog(this, "Delete directory \"" +dirRemove + "\" as well as saved profiles?", "Are you sure? Careful!!", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            File uninstall = new File(dirRemove);
            deleteAllFiles(uninstall);
            for( int x = 0; x < prefFiles.length; x++ ) {
            	prefFiles[x].delete();
            }
        }
    }//GEN-LAST:event_buttonUninstallActionPerformed

    private void checkBoxFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxFullScreenActionPerformed
        //comboResolution.setEnabled(!checkBoxFullScreen.isSelected());
    }//GEN-LAST:event_checkBoxFullScreenActionPerformed

private void checkBoxSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSoundActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_checkBoxSoundActionPerformed

private void checkBoxPsycoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxPsycoActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_checkBoxPsycoActionPerformed

private void userPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userPasswordActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_userPasswordActionPerformed
    
    public static boolean deleteAllFiles(File dir) {
        if(!dir.exists()) {
            return true;
        }
        boolean res = true;
        if(dir.isDirectory()) {
            File[] files = dir.listFiles();
            for(int i = 0; i < files.length; i++) {
                res &= deleteAllFiles(files[i]);
            }
            res = dir.delete();//Delete dir itself
        } else {
            res = dir.delete();
        }
        return res;
    }

    private void saveProfile(){
        String server = comboServer.getSelectedItem().toString();
        int empire = (Integer) comboEmpire.getSelectedIndex()+1;
        String password = new String(userPassword.getPassword());
        String game = textFieldGame.getText();
        String description = textFieldDescription.getText();
        int profile = comboProfile.getSelectedIndex();
        String resolution = (String) comboResolution.getSelectedItem();
        boolean fullscreen = checkBoxFullScreen.isSelected();
        boolean sound = checkBoxSound.isSelected();
        boolean psyco = checkBoxPsyco.isSelected();
        Dimension dim = null;
        String[] xy = resolution.split("x");
        if( xy.length != 2 ) {
            JOptionPane.showMessageDialog(this, "Could not save Profile. Make sure resolution it is in the form NNNNxNNNN", "Invalid resolution", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            int x = Integer.parseInt(xy[0]);
            int y = Integer.parseInt(xy[1]);
            dim = new Dimension(x, y);
        } catch( NumberFormatException nfe ) {
            JOptionPane.showMessageDialog(this, "Could not save Profile. Make sure resolution it is in the form NNNNxNNNN", "Invalid resolution", JOptionPane.ERROR_MESSAGE);
            nfe.printStackTrace();
        }

        LaunchProfile prof = new LaunchProfile(server, game, empire, password, description, dim, fullscreen, sound, psyco);
        this.preferences.setProfile(profile, prof);
        this.writeProfile(prof);
    }

    // Copies src file to dst file.
    // If the dst file does not exist, it is created
    void copy(File src, File dst) throws IOException {
        InputStream in = new FileInputStream(src);
        System.out.println(dst.getAbsolutePath());
        dst.createNewFile();
        OutputStream out = new FileOutputStream(dst);
    
        // Transfer bytes from in to out
        byte[] buf = new byte[1024];
        int len;
        while ((len = in.read(buf)) > 0) {
            out.write(buf, 0, len);
        }
        in.close();
        out.close();
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton buttonLaunch;
    private javax.swing.JButton buttonUninstall;
    private javax.swing.JLabel bytesDescription;
    private javax.swing.JLabel bytesLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox checkBoxFullScreen;
    private javax.swing.JCheckBox checkBoxPsyco;
    private javax.swing.JCheckBox checkBoxSound;
    private javax.swing.JComboBox comboEmpire;
    private javax.swing.JComboBox comboProfile;
    private javax.swing.JComboBox comboResolution;
    private javax.swing.JComboBox comboServer;
    private javax.swing.JPanel installPanel;
    private javax.swing.JTextField installPath;
    private javax.swing.JButton installUpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel launchPanel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JTextField textFieldDescription;
    private javax.swing.JTextField textFieldGame;
    private javax.swing.JPasswordField userPassword;
    // End of variables declaration//GEN-END:variables
    
}
